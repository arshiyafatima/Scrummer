//------------------------------------------------------------------------------
// <auto-generated>
//    This code was generated from a template.
//
//    Manual changes to this file may cause unexpected behavior in your application.
//    Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Scrummer.Entity.Entity
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Objects;
    using System.Data.Objects.DataClasses;
    using System.Linq;
    
    public partial class ScrumEntities : DbContext
    {
        public ScrumEntities()
            : base("name=ScrumEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public DbSet<Scrum> Scrums { get; set; }
        public DbSet<UserDetail> UserDetails { get; set; }
        public DbSet<UserScrum> UserScrums { get; set; }
        public DbSet<UserScrumDetailBlocker> UserScrumDetailBlockers { get; set; }
        public DbSet<UserScrumDetailTodayTask> UserScrumDetailTodayTasks { get; set; }
        public DbSet<UserScrumDetailYesterdayTask> UserScrumDetailYesterdayTasks { get; set; }
        public DbSet<UserScrumDetailParkingLot> UserScrumDetailParkingLots { get; set; }
    
        public virtual int AddUserScrumStatus(string email, Nullable<int> scrumID, string yesterdayTask, string todayTask, string blockerTask, string parkingLot, Nullable<int> yesterdayTaskLength, Nullable<int> todayTaskLength, Nullable<int> blockerTaskLength, Nullable<int> parkingLotLength)
        {
            var emailParameter = email != null ?
                new ObjectParameter("email", email) :
                new ObjectParameter("email", typeof(string));
    
            var scrumIDParameter = scrumID.HasValue ?
                new ObjectParameter("scrumID", scrumID) :
                new ObjectParameter("scrumID", typeof(int));
    
            var yesterdayTaskParameter = yesterdayTask != null ?
                new ObjectParameter("yesterdayTask", yesterdayTask) :
                new ObjectParameter("yesterdayTask", typeof(string));
    
            var todayTaskParameter = todayTask != null ?
                new ObjectParameter("todayTask", todayTask) :
                new ObjectParameter("todayTask", typeof(string));
    
            var blockerTaskParameter = blockerTask != null ?
                new ObjectParameter("blockerTask", blockerTask) :
                new ObjectParameter("blockerTask", typeof(string));
    
            var parkingLotParameter = parkingLot != null ?
                new ObjectParameter("parkingLot", parkingLot) :
                new ObjectParameter("parkingLot", typeof(string));
    
            var yesterdayTaskLengthParameter = yesterdayTaskLength.HasValue ?
                new ObjectParameter("yesterdayTaskLength", yesterdayTaskLength) :
                new ObjectParameter("yesterdayTaskLength", typeof(int));
    
            var todayTaskLengthParameter = todayTaskLength.HasValue ?
                new ObjectParameter("todayTaskLength", todayTaskLength) :
                new ObjectParameter("todayTaskLength", typeof(int));
    
            var blockerTaskLengthParameter = blockerTaskLength.HasValue ?
                new ObjectParameter("blockerTaskLength", blockerTaskLength) :
                new ObjectParameter("blockerTaskLength", typeof(int));
    
            var parkingLotLengthParameter = parkingLotLength.HasValue ?
                new ObjectParameter("parkingLotLength", parkingLotLength) :
                new ObjectParameter("parkingLotLength", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("AddUserScrumStatus", emailParameter, scrumIDParameter, yesterdayTaskParameter, todayTaskParameter, blockerTaskParameter, parkingLotParameter, yesterdayTaskLengthParameter, todayTaskLengthParameter, blockerTaskLengthParameter, parkingLotLengthParameter);
        }
    
        public virtual int DeleteScrum(Nullable<int> scrumID)
        {
            var scrumIDParameter = scrumID.HasValue ?
                new ObjectParameter("scrumID", scrumID) :
                new ObjectParameter("scrumID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DeleteScrum", scrumIDParameter);
        }
    
        public virtual ObjectResult<GetAllScrumUsersByScrumID_Result> GetAllScrumUsersByScrumID(Nullable<int> scrumId)
        {
            var scrumIdParameter = scrumId.HasValue ?
                new ObjectParameter("scrumId", scrumId) :
                new ObjectParameter("scrumId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetAllScrumUsersByScrumID_Result>("GetAllScrumUsersByScrumID", scrumIdParameter);
        }
    
        public virtual ObjectResult<GetAllUserNames_Result> GetAllUserNames(string email, Nullable<int> scrumID, Nullable<bool> isautocomplete)
        {
            var emailParameter = email != null ?
                new ObjectParameter("email", email) :
                new ObjectParameter("email", typeof(string));
    
            var scrumIDParameter = scrumID.HasValue ?
                new ObjectParameter("scrumID", scrumID) :
                new ObjectParameter("scrumID", typeof(int));
    
            var isautocompleteParameter = isautocomplete.HasValue ?
                new ObjectParameter("isautocomplete", isautocomplete) :
                new ObjectParameter("isautocomplete", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetAllUserNames_Result>("GetAllUserNames", emailParameter, scrumIDParameter, isautocompleteParameter);
        }
    
        public virtual ObjectResult<GetUserDeatilsByEmailAndPassword_Result> GetUserDeatilsByEmailAndPassword(string emailId, string password, string encryptKey)
        {
            var emailIdParameter = emailId != null ?
                new ObjectParameter("emailId", emailId) :
                new ObjectParameter("emailId", typeof(string));
    
            var passwordParameter = password != null ?
                new ObjectParameter("password", password) :
                new ObjectParameter("password", typeof(string));
    
            var encryptKeyParameter = encryptKey != null ?
                new ObjectParameter("encryptKey", encryptKey) :
                new ObjectParameter("encryptKey", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetUserDeatilsByEmailAndPassword_Result>("GetUserDeatilsByEmailAndPassword", emailIdParameter, passwordParameter, encryptKeyParameter);
        }
    
        public virtual int RegisterNewUserDetails(string firstName, string lastName, string emailId, string password, string timeZone, string encryptKey, byte[] imageData)
        {
            var firstNameParameter = firstName != null ?
                new ObjectParameter("firstName", firstName) :
                new ObjectParameter("firstName", typeof(string));
    
            var lastNameParameter = lastName != null ?
                new ObjectParameter("lastName", lastName) :
                new ObjectParameter("lastName", typeof(string));
    
            var emailIdParameter = emailId != null ?
                new ObjectParameter("emailId", emailId) :
                new ObjectParameter("emailId", typeof(string));
    
            var passwordParameter = password != null ?
                new ObjectParameter("password", password) :
                new ObjectParameter("password", typeof(string));
    
            var timeZoneParameter = timeZone != null ?
                new ObjectParameter("timeZone", timeZone) :
                new ObjectParameter("timeZone", typeof(string));
    
            var encryptKeyParameter = encryptKey != null ?
                new ObjectParameter("encryptKey", encryptKey) :
                new ObjectParameter("encryptKey", typeof(string));
    
            var imageDataParameter = imageData != null ?
                new ObjectParameter("imageData", imageData) :
                new ObjectParameter("imageData", typeof(byte[]));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("RegisterNewUserDetails", firstNameParameter, lastNameParameter, emailIdParameter, passwordParameter, timeZoneParameter, encryptKeyParameter, imageDataParameter);
        }
    
        public virtual int ResetPassword(string email, string password, string encryptKey)
        {
            var emailParameter = email != null ?
                new ObjectParameter("email", email) :
                new ObjectParameter("email", typeof(string));
    
            var passwordParameter = password != null ?
                new ObjectParameter("password", password) :
                new ObjectParameter("password", typeof(string));
    
            var encryptKeyParameter = encryptKey != null ?
                new ObjectParameter("encryptKey", encryptKey) :
                new ObjectParameter("encryptKey", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("ResetPassword", emailParameter, passwordParameter, encryptKeyParameter);
        }
    
        public virtual int UpdateScrumDetails(string email, Nullable<int> scrumID, string scrumName, string description, string daysOfOccurence, string dailyOccursTime, string remainder, string timeZone, Nullable<int> isActive, string users, string removeUsers, Nullable<int> usersLength, Nullable<int> removeUsersLength)
        {
            var emailParameter = email != null ?
                new ObjectParameter("email", email) :
                new ObjectParameter("email", typeof(string));
    
            var scrumIDParameter = scrumID.HasValue ?
                new ObjectParameter("scrumID", scrumID) :
                new ObjectParameter("scrumID", typeof(int));
    
            var scrumNameParameter = scrumName != null ?
                new ObjectParameter("scrumName", scrumName) :
                new ObjectParameter("scrumName", typeof(string));
    
            var descriptionParameter = description != null ?
                new ObjectParameter("description", description) :
                new ObjectParameter("description", typeof(string));
    
            var daysOfOccurenceParameter = daysOfOccurence != null ?
                new ObjectParameter("daysOfOccurence", daysOfOccurence) :
                new ObjectParameter("daysOfOccurence", typeof(string));
    
            var dailyOccursTimeParameter = dailyOccursTime != null ?
                new ObjectParameter("dailyOccursTime", dailyOccursTime) :
                new ObjectParameter("dailyOccursTime", typeof(string));
    
            var remainderParameter = remainder != null ?
                new ObjectParameter("remainder", remainder) :
                new ObjectParameter("remainder", typeof(string));
    
            var timeZoneParameter = timeZone != null ?
                new ObjectParameter("timeZone", timeZone) :
                new ObjectParameter("timeZone", typeof(string));
    
            var isActiveParameter = isActive.HasValue ?
                new ObjectParameter("isActive", isActive) :
                new ObjectParameter("isActive", typeof(int));
    
            var usersParameter = users != null ?
                new ObjectParameter("users", users) :
                new ObjectParameter("users", typeof(string));
    
            var removeUsersParameter = removeUsers != null ?
                new ObjectParameter("removeUsers", removeUsers) :
                new ObjectParameter("removeUsers", typeof(string));
    
            var usersLengthParameter = usersLength.HasValue ?
                new ObjectParameter("usersLength", usersLength) :
                new ObjectParameter("usersLength", typeof(int));
    
            var removeUsersLengthParameter = removeUsersLength.HasValue ?
                new ObjectParameter("removeUsersLength", removeUsersLength) :
                new ObjectParameter("removeUsersLength", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UpdateScrumDetails", emailParameter, scrumIDParameter, scrumNameParameter, descriptionParameter, daysOfOccurenceParameter, dailyOccursTimeParameter, remainderParameter, timeZoneParameter, isActiveParameter, usersParameter, removeUsersParameter, usersLengthParameter, removeUsersLengthParameter);
        }
    
        public virtual int UpdateUserScrumStatus(Nullable<int> userId, Nullable<int> scrumID, string scrumYesterdayText, string scrumTodayText, string blockers)
        {
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("userId", userId) :
                new ObjectParameter("userId", typeof(int));
    
            var scrumIDParameter = scrumID.HasValue ?
                new ObjectParameter("scrumID", scrumID) :
                new ObjectParameter("scrumID", typeof(int));
    
            var scrumYesterdayTextParameter = scrumYesterdayText != null ?
                new ObjectParameter("scrumYesterdayText", scrumYesterdayText) :
                new ObjectParameter("scrumYesterdayText", typeof(string));
    
            var scrumTodayTextParameter = scrumTodayText != null ?
                new ObjectParameter("scrumTodayText", scrumTodayText) :
                new ObjectParameter("scrumTodayText", typeof(string));
    
            var blockersParameter = blockers != null ?
                new ObjectParameter("blockers", blockers) :
                new ObjectParameter("blockers", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UpdateUserScrumStatus", userIdParameter, scrumIDParameter, scrumYesterdayTextParameter, scrumTodayTextParameter, blockersParameter);
        }
    }
}
